dA = {' ': ' ', '─': '╌', '━': '╍', '│': '╎', '┃': '╏', '┄': '┈', '┅': '┉', '┆': '┊', '┇': '┋', '┈': '─', '┉': '━', '┊': '│', '┋': '┃', '┌': '╭', '┍': '┍', '┎': '┎', '┏': '┏', '┐': '╮', '┑': '┑', '┒': '┒', '┓': '┓', '└': '╰', '┕': '┕', '┖': '┖', '┗': '┗', '┘': '╯', '┙': '┙', '┚': '┚', '┛': '┛', '├': '├', '┝': '┝', '┞': '┞', '┟': '┟', '┠': '┠', '┡': '┡', '┢': '┢', '┣': '┣', '┤': '┤', '┥': '┥', '┦': '┦', '┧': '┧', '┨': '┨', '┩': '┩', '┪': '┪', '┫': '┫', '┬': '┬', '┭': '┭', '┮': '┮', '┯': '┯', '┰': '┰', '┱': '┱', '┲': '┲', '┳': '┳', '┴': '┴', '┵': '┵', '┶': '┶', '┷': '┷', '┸': '┸', '┹': '┹', '┺': '┺', '┻': '┻', '┼': '╳', '┽': '┽', '┾': '┾', '┿': '┿', '╀': '╀', '╁': '╁', '╂': '╂', '╃': '╃', '╄': '╄', '╅': '╅', '╆': '╆', '╇': '╇', '╈': '╈', '╉': '╉', '╊': '╊', '╋': '╋', '╌': '┄', '╍': '┅', '╎': '┆', '╏': '┇', '═': '═', '║': '║', '╒': '╒', '╓': '╓', '╔': '╔', '╕': '╕', '╖': '╖', '╗': '╗', '╘': '╘', '╙': '╙', '╚': '╚', '╛': '╛', '╜': '╜', '╝': '╝', '╞': '╞', '╟': '╟', '╠': '╠', '╡': '╡', '╢': '╢', '╣': '╣', '╤': '╤', '╥': '╥', '╦': '╦', '╧': '╧', '╨': '╨', '╩': '╩', '╪': '╪', '╫': '╫', '╬': '╬', '╭': '┌', '╮': '┐', '╯': '┘', '╰': '└', '╱': '╲', '╲': '╱', '╳': '┼', '╴': '╴', '╵': '╵', '╶': '╶', '╷': '╷', '╸': '╸', '╹': '╹', '╺': '╺', '╻': '╻', '╼': '╼', '╽': '╽', '╾': '╾', '╿': '╿'}
dB = {' ': ' ', '─': '━', '━': '─', '│': '┃', '┃': '│', '┄': '┅', '┅': '┄', '┆': '┇', '┇': '┆', '┈': '┉', '┉': '┈', '┊': '┋', '┋': '┊', '┌': '┏', '┍': '┎', '┎': '┍', '┏': '┌', '┐': '┓', '┑': '┒', '┒': '┑', '┓': '┐', '└': '┗', '┕': '┖', '┖': '┕', '┗': '└', '┘': '┛', '┙': '┚', '┚': '┙', '┛': '┘', '├': '┣', '┝': '┠', '┞': '┢', '┟': '┡', '┠': '┝', '┡': '┟', '┢': '┞', '┣': '├', '┤': '┫', '┥': '┨', '┦': '┪', '┧': '┩', '┨': '┥', '┩': '┧', '┪': '┦', '┫': '┤', '┬': '┳', '┭': '┲', '┮': '┱', '┯': '┰', '┰': '┯', '┱': '┮', '┲': '┭', '┳': '┬', '┴': '┻', '┵': '┺', '┶': '┹', '┷': '┸', '┸': '┷', '┹': '┶', '┺': '┵', '┻': '┴', '┼': '╋', '┽': '╊', '┾': '╉', '┿': '╂', '╀': '╈', '╁': '╇', '╂': '┿', '╃': '╆', '╄': '╅', '╅': '╄', '╆': '╃', '╇': '╁', '╈': '╀', '╉': '┾', '╊': '┽', '╋': '┼', '╌': '╍', '╍': '╌', '╎': '╏', '╏': '╎', '═': '─', '║': '│', '╒': '┎', '╓': '┍', '╔': '┌', '╕': '┒', '╖': '┑', '╗': '┌', '╘': '┖', '╙': '┕', '╚': '└', '╛': '┚', '╜': '┙', '╝': '┘', '╞': '┠', '╟': '┝', '╠': '├', '╡': '┨', '╢': '┥', '╣': '┤', '╤': '┰', '╥': '┯', '╦': '┬', '╧': '┸', '╨': '┷', '╩': '┴', '╪': '╂', '╫': '┿', '╬': '┼', '╭': '┏', '╮': '┓', '╯': '┛', '╰': '┗', '╱': '╱', '╲': '╲', '╳': '╳', '╴': '╸', '╵': '╹', '╶': '╺', '╷': '╻', '╸': '╴', '╹': '╵', '╺': '╶', '╻': '╷', '╼': '╾', '╽': '╿', '╾': '╼', '╿': '╽'}
dC = {' ': ' ', '─': '═', '━': '─', '│': '║', '┃': '│', '┄': '═', '┅': '┄', '┆': '║', '┇': '┆', '┈': '═', '┉': '┈', '┊': '║', '┋': '┊', '┌': '╔', '┍': '╓', '┎': '╒', '┏': '┌', '┐': '╗', '┑': '╖', '┒': '╕', '┓': '┐', '└': '╚', '┕': '╙', '┖': '╘', '┗': '└', '┘': '╝', '┙': '╜', '┚': '╛', '┛': '┘', '├': '╠', '┝': '╟', '┞': '┢', '┟': '┡', '┠': '╞', '┡': '┟', '┢': '┞', '┣': '├', '┤': '╣', '┥': '╢', '┦': '┪', '┧': '┩', '┨': '╡', '┩': '┧', '┪': '┦', '┫': '┤', '┬': '╦', '┭': '┲', '┮': '┱', '┯': '╥', '┰': '╤', '┱': '┮', '┲': '┭', '┳': '┬', '┴': '╩', '┵': '┺', '┶': '┹', '┷': '╨', '┸': '╧', '┹': '┶', '┺': '┵', '┻': '┴', '┼': '╬', '┽': '╊', '┾': '╉', '┿': '╫', '╀': '╈', '╁': '╇', '╂': '╪', '╃': '╆', '╄': '╅', '╅': '╄', '╆': '╃', '╇': '╁', '╈': '╀', '╉': '┾', '╊': '┽', '╋': '┼', '╌': '═', '╍': '╌', '╎': '║', '╏': '╎', '═': '─', '║': '│', '╒': '╓', '╓': '╒', '╔': '┌', '╕': '╖', '╖': '╕', '╗': '┐', '╘': '╙', '╙': '╘', '╚': '└', '╛': '╜', '╜': '╛', '╝': '┘', '╞': '╟', '╟': '╞', '╠': '├', '╡': '╢', '╢': '╡', '╣': '┤', '╤': '╥', '╥': '╤', '╦': '┬', '╧': '╨', '╨': '╧', '╩': '┴', '╪': '╫', '╫': '╪', '╬': '┼', '╭': '╔', '╮': '╗', '╯': '╝', '╰': '╚', '╱': '╱', '╲': '╲', '╳': '╳', '╴': '╸', '╵': '╹', '╶': '╺', '╷': '╻', '╸': '╴', '╹': '╵', '╺': '╶', '╻': '╷', '╼': '╾', '╽': '╿', '╾': '╼', '╿': '╽'}
dLeft = {' ': '╴', '─': '╶', '━': '╺', '│': '┤', '┃': '┨', '┄': '╶', '┅': '╺', '┆': '┤', '┇': '┨', '┈': '╶', '┉': '╺', '┊': '┤', '┋': '┨', '┌': '┬', '┍': '┮', '┎': '┰', '┏': '┲', '┐': '╷', '┑': '╷', '┒': '╻', '┓': '╻', '└': '┴', '┕': '┶', '┖': '┸', '┗': '┺', '┘': '╵', '┙': '╵', '┚': '╹', '┛': '╹', '├': '┼', '┝': '┾', '┞': '╀', '┟': '╁', '┠': '╂', '┡': '╄', '┢': '╆', '┣': '╊', '┤': '│', '┥': '│', '┦': '╿', '┧': '╽', '┨': '┃', '┩': '╿', '┪': '╽', '┫': '┃', '┬': '┌', '┭': '┌', '┮': '┍', '┯': '┍', '┰': '┎', '┱': '┎', '┲': '┏', '┳': '┏', '┴': '└', '┵': '└', '┶': '┕', '┷': '┕', '┸': '┖', '┹': '┖', '┺': '┗', '┻': '┗', '┼': '├', '┽': '├', '┾': '┝', '┿': '┝', '╀': '┞', '╁': '┟', '╂': '┠', '╃': '┞', '╄': '┡', '╅': '┟', '╆': '┢', '╇': '┡', '╈': '┢', '╉': '┠', '╊': '┣', '╋': '┣', '╌': '╶', '╍': '╺', '╎': '┤', '╏': '┨', '═': '╺', '║': '╢', '╒': '┮', '╓': '╥', '╔': '┲', '╕': '╷', '╖': '╻', '╗': '╻', '╘': '┶', '╙': '╨', '╚': '┺', '╛': '╵', '╜': '╹', '╝': '╹', '╞': '┾', '╟': '╫', '╠': '╊', '╡': '│', '╢': '║', '╣': '║', '╤': '╒', '╥': '╓', '╦': '╔', '╧': '╘', '╨': '╙', '╩': '╚', '╪': '╘', '╫': '╟', '╬': '╠', '╭': '┬', '╮': '╷', '╯': '╵', '╰': '┴', '╱': '╳', '╲': ' ', '╳': '╱', '╴': ' ', '╵': '┘', '╶': '─', '╷': '┐', '╸': ' ', '╹': '┚', '╺': '╼', '╻': '┒', '╼': '╺', '╽': '┧', '╾': '╶', '╿': '┦'}
dRight = {' ': '╶', '─': '╴', '━': '╸', '│': '├', '┃': '┠', '┄': '╴', '┅': '╸', '┆': '├', '┇': '┠', '┈': '╴', '┉': '╸', '┊': '├', '┋': '┠', '┌': '╷', '┍': '╷', '┎': '╻', '┏': '╻', '┐': '┬', '┑': '┭', '┒': '┰', '┓': '┱', '└': '╵', '┕': '╵', '┖': '╹', '┗': '╹', '┘': '┴', '┙': '┵', '┚': '┸', '┛': '┹', '├': '│', '┝': '│', '┞': '╿', '┟': '╽', '┠': '┃', '┡': '╿', '┢': '╽', '┣': '┃', '┤': '┼', '┥': '┽', '┦': '╀', '┧': '╁', '┨': '╂', '┩': '╃', '┪': '╅', '┫': '╉', '┬': '┐', '┭': '┑', '┮': '┐', '┯': '┑', '┰': '┒', '┱': '┓', '┲': '┒', '┳': '┓', '┴': '┘', '┵': '┙', '┶': '┘', '┷': '┙', '┸': '┚', '┹': '┛', '┺': '┚', '┻': '┛', '┼': '┤', '┽': '┥', '┾': '┤', '┿': '┥', '╀': '┦', '╁': '┧', '╂': '┨', '╃': '┩', '╄': '┦', '╅': '┪', '╆': '┧', '╇': '┩', '╈': '┪', '╉': '┫', '╊': '┨', '╋': '┫', '╌': '╴', '╍': '╸', '╎': '┤', '╏': '┠', '═': '╸', '║': '╟', '╒': '╷', '╓': '╻', '╔': '╻', '╕': '┭', '╖': '╥', '╗': '┱', '╘': '╵', '╙': '╹', '╚': '╹', '╛': '┵', '╜': '╨', '╝': '┹', '╞': '│', '╟': '║', '╠': '║', '╡': '┽', '╢': '╫', '╣': '╉', '╤': '╕', '╥': '╕', '╦': '╗', '╧': '╛', '╨': '╜', '╩': '╝', '╪': '╡', '╫': '╢', '╬': '╣', '╭': '╷', '╮': '┬', '╯': '┴', '╰': '╵', '╱': ' ', '╲': '╳', '╳': '╲', '╴': '─', '╵': '└', '╶': ' ', '╷': '┌', '╸': '╾', '╹': '┖', '╺': ' ', '╻': '┎', '╼': '╴', '╽': '┟', '╾': '╸', '╿': '┞'}
dUp = {' ': '╵', '─': '┴', '━': '┷', '│': '╷', '┃': '╻', '┄': '┬', '┅': '┯', '┆': '╵', '┇': '╹', '┈': '┴', '┉': '┷', '┊': '╷', '┋': '╻', '┌': '├', '┍': '┝', '┎': '┟', '┏': '┢', '┐': '┤', '┑': '┥', '┒': '┧', '┓': '┪', '└': '╶', '┕': '╺', '┖': '╶', '┗': '╺', '┘': '╴', '┙': '╸', '┚': '╴', '┛': '╸', '├': '┌', '┝': '┍', '┞': '┌', '┟': '┎', '┠': '┎', '┡': '┍', '┢': '┏', '┣': '┏', '┤': '┐', '┥': '┑', '┦': '┐', '┧': '┒', '┨': '┒', '┩': '┑', '┪': '┓', '┫': '┓', '┬': '┼', '┭': '┽', '┮': '┾', '┯': '┿', '┰': '╁', '┱': '╅', '┲': '╆', '┳': '╈', '┴': '─', '┵': '╾', '┶': '╼', '┷': '━', '┸': '─', '┹': '╾', '┺': '╼', '┻': '━', '┼': '┬', '┽': '┭', '┾': '┮', '┿': '┯', '╀': '┬', '╁': '┰', '╂': '┰', '╃': '┭', '╄': '┮', '╅': '┱', '╆': '┲', '╇': '┯', '╈': '┳', '╉': '┱', '╊': '┲', '╋': '┳', '╌': '┴', '╍': '┷', '╎': '╷', '╏': '╻', '═': '╧', '║': '╻', '╒': '╞', '╓': '┟', '╔': '┢', '╕': '╡', '╖': '┧', '╗': '┪', '╘': '╺', '╙': '╶', '╚': '╺', '╛': '╸', '╜': '╴', '╝': '╸', '╞': '╒', '╟': '╓', '╠': '╔', '╡': '╕', '╢': '╖', '╣': '╗', '╤': '╪', '╥': '╁', '╦': '╈', '╧': '═', '╨': '─', '╩': '═', '╪': '╤', '╫': '╥', '╬': '╦', '╭': '├', '╮': '┤', '╯': '╴', '╰': '╶', '╱': ' ', '╲': '╳', '╳': '╲', '╴': '┘', '╵': ' ', '╶': '└', '╷': '│', '╸': '┙', '╹': ' ', '╺': '┕', '╻': '╽', '╼': '┶', '╽': '╻', '╾': '┵', '╿': '╷'}
dDown = {' ': '╷', '─': '┬', '━': '┯', '│': '╵', '┃': '╹', '┄': '┬', '┅': '┯', '┆': '╵', '┇': '╹', '┈': '┬', '┉': '┯', '┊': '╵', '┋': '╹', '┌': '╶', '┍': '╺', '┎': '╶', '┏': '╺', '┐': '╴', '┑': '╸', '┒': '╴', '┓': '╸', '└': '├', '┕': '┝', '┖': '┞', '┗': '┡', '┘': '┤', '┙': '┥', '┚': '┦', '┛': '┩', '├': '└', '┝': '┕', '┞': '┖', '┟': '└', '┠': '┖', '┡': '┗', '┢': '┕', '┣': '┗', '┤': '┘', '┥': '┙', '┦': '┚', '┧': '┘', '┨': '┚', '┩': '┛', '┪': '┙', '┫': '┛', '┬': '─', '┭': '╾', '┮': '╼', '┯': '━', '┰': '─', '┱': '╾', '┲': '╼', '┳': '━', '┴': '┼', '┵': '┽', '┶': '┾', '┷': '┿', '┸': '╀', '┹': '╃', '┺': '╄', '┻': '╇', '┼': '┴', '┽': '┵', '┾': '┶', '┿': '┷', '╀': '┸', '╁': '┴', '╂': '┸', '╃': '┹', '╄': '┺', '╅': '┵', '╆': '┶', '╇': '┻', '╈': '┷', '╉': '┹', '╊': '┺', '╋': '┻', '╌': '┬', '╍': '┯', '╎': '╵', '╏': '╹', '═': '╤', '║': '╹', '╒': '╺', '╓': '╶', '╔': '╺', '╕': '╸', '╖': '╴', '╗': '╸', '╘': '╞', '╙': '┞', '╚': '┡', '╛': '╡', '╜': '┦', '╝': '┩', '╞': '╘', '╟': '╙', '╠': '╚', '╡': '╛', '╢': '╜', '╣': '╝', '╤': '═', '╥': '─', '╦': '═', '╧': '╪', '╨': '╀', '╩': '╇', '╪': '╧', '╫': '╨', '╬': '╩', '╭': '╶', '╮': '╴', '╯': '┤', '╰': '├', '╱': '╳', '╲': ' ', '╳': '╱', '╴': '┐', '╵': '│', '╶': '┌', '╷': ' ', '╸': '┑', '╹': '╿', '╺': '┍', '╻': ' ', '╼': '┮', '╽': '╵', '╾': '┭', '╿': '╹'}
elements = {}
import tkinter as tk
import tkinter.font
f=open("config.txt").read().split("\n")
config={}
for e in f:
    ee=e.split('=')
    if len(ee)==2:
        config[ee[0]]=ee[1]
version=open("version.txt").read()
window = tk.Tk()
window.title("Pasciint - {}".format(version))
#window.iconbitmap('icon.ico')
bu = tk.font.Font(family='consolas', size=40)
size = 10
char=[[tk.Label(window,text=" ",background='white',height=1,width=1,padx=0,pady=0,font=bu,bd=0) for y in range(1+size*2)] for x in range(1+size)]
for y in range(len(char)):
    for x in range(len(char[y])):
        char[y][x].grid(column=x,row=y)
char[size//2][size].configure(background='yellow')
xn=0
yn=0
insert=True
def refresh():
    for y in char:
        for x in y:
            x.configure(text=" ")
    for e in elements.items():
        try:
            xd=e[0][1]-yn+size//2
            yd=e[0][0]-xn+size
            if xd>=0 and yd>=0:
                char[xd][yd].configure(text=e[1])
        except Exception as ttt:
            pass
def move(xv,yv):
    global xn
    global yn
    xn+=xv
    yn+=yv
    refresh()
clipboard=" "
def change(what):
    try:
        e=elements[(xn,yn)]
    except:
        e=" "
    if what=="right":
        elements[(xn,yn)]=dRight[e]
    elif what=="left":
        elements[(xn,yn)]=dLeft[e]
    elif what=="up":
        elements[(xn,yn)]=dUp[e]
    elif what=="down":
        elements[(xn,yn)]=dDown[e]
    elif what=="alt":
        elements[(xn,yn)]=dA[e]
    elif what=="bold":
        elements[(xn,yn)]=dB[e]
    elif what=="double":
        elements[(xn,yn)]=dC[e]
    elif what=="copy":
        global clipboard
        clipboard=e
    elif what=="paste":
        elements[(xn,yn)]=clipboard
    refresh()
def save():
    r=elements.items()
    mini=[99999,9999]
    maxi=[-9999999,-999999]
    for e in r:
        if e[0][0]<mini[0]:
            mini[0]=e[0][0]
        if e[0][0]>maxi[0]:
            maxi[0]=e[0][0]
        if e[0][1]<mini[1]:
            mini[1]=e[0][1]
        if e[0][1]>maxi[1]:
            maxi[1]=e[0][1]
    s=""
    for y in range(mini[1],maxi[1]+1):
        for x in range(mini[0],maxi[0]+1):
            try:
                e=elements[(x,y)]
            except:
                e=" "
            s+=e
        s+="\n"
    f=open("save.txt","wb")
    f.write(s.encode())
    f.close()
def change_color(c):
    char[size//2][size].configure(background=c)
def key_handler(event):
    global insert,elements,xn,yn
    print(event)
    print(insert)
    char = event.char
    if event.char=="\r":
        insert=not insert
        if insert:
            change_color('yellow')
        else:
            change_color('lime')
        return None
    if insert:
        print(config)
        if char.lower() in config.values():
            change(next((k for k, v in config.items() if v == char.lower()), None))
        return None
    # Get the character typed
    print(char)
    if char=="\x08":
        try:
            del elements[(xn-1,yn)]
        except KeyError:
            pass
        updated_dict = {}
        for (x, y), value in elements.items():
            if y == yn and x>=xn:
                updated_dict[(x - 1, y)] = value  # Increase x by 1
            else:
                updated_dict[(x, y)] = value  # Keep other keys unchange
        elements=updated_dict
        move(-1,0)
    elif char=="\x7f":
        try:
            del elements[(xn,yn)]
        except KeyError:
            pass
        updated_dict = {}
        for (x, y), value in elements.items():
            if y == yn and x>xn:
                updated_dict[(x - 1, y)] = value  # Increase x by 1
            else:
                updated_dict[(x, y)] = value  # Keep other keys unchange
        elements=updated_dict
        move(-1,0)
    elif char:  # Check if a character is present

        updated_dict = {}
        for (x, y), value in elements.items():
            if y == yn and x>=xn:
                updated_dict[(x + 1, y)] = value  # Increase x by 1
            else:
                updated_dict[(x, y)] = value  # Keep other keys unchange
        elements=updated_dict
        elements[(xn,yn)]=str(char)
        move(1,0)
    refresh()
window.bind("<Up>",lambda event:move(0,-1))
window.bind("<Down>",lambda event:move(0,1))
window.bind("<Right>",lambda event:move(1,0))
window.bind("<Left>",lambda event:move(-1,0))
window.bind("<Enter>",lambda event:change('insert'))
window.bind("<Key>",key_handler)
#window.bind("<Key-{}>".format(config['right']),lambda event:change('right'))
#window.bind("<Key-{}>".format(config['left']),lambda event:change('left'))
#window.bind("<Key-{}>".format(config['up']),lambda event:change('up'))
#window.bind("<Key-{}>".format(config['down']),lambda event:change('down'))
#window.bind("<Key-{}>".format(config['altform']),lambda event:change('alt'))
#window.bind("<Key-{}>".format(config['bold']),lambda event:change('bold'))
#window.bind("<Key-{}>".format(config['double']),lambda event:change('double'))
#window.bind("<Key-{}>".format(config['copy']),lambda event:change('copy'))
#window.bind("<Key-{}>".format(config['paste']),lambda event:change('paste'))
#window.bind("<Key-{}>".format(config['save']),lambda event:save())
window.mainloop()